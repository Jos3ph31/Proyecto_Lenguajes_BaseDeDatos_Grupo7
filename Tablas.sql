--Empleados
CREATE TABLE Empleados (
    EmpleadoID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Telefono VARCHAR2(15) NOT NULL,
    Email VARCHAR2(100) NOT NULL,
    Posicion VARCHAR2(50) NOT NULL,
    FechaContratacion DATE NOT NULL,
    Salario NUMBER NOT NULL
);

-- Crear Empleado
CREATE OR REPLACE PROCEDURE crear_empleado (
    p_nombre IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_email IN VARCHAR2,
    p_posicion IN VARCHAR2,
    p_fechaContratacion IN DATE,
    p_salario IN NUMBER
)
IS
BEGIN
    INSERT INTO Empleados (Nombre, Telefono, Email, Posicion, FechaContratacion, Salario)
    VALUES (p_nombre, p_telefono, p_email, p_posicion, p_fechaContratacion, p_salario);
END crear_empleado;
/

-- Leer Empleado
CREATE OR REPLACE PROCEDURE leer_empleado (
    p_empleadoID IN NUMBER,
    cur OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur FOR SELECT * FROM Empleados WHERE EmpleadoID = p_empleadoID;
END leer_empleado;
/

-- Actualizar Empleado
CREATE OR REPLACE PROCEDURE actualizar_empleado (
    p_empleadoID IN NUMBER,
    p_nombre IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_email IN VARCHAR2,
    p_posicion IN VARCHAR2,
    p_fechaContratacion IN DATE,
    p_salario IN NUMBER
)
IS
BEGIN
    UPDATE Empleados
    SET Nombre = p_nombre,
        Telefono = p_telefono,
        Email = p_email,
        Posicion = p_posicion,
        FechaContratacion = p_fechaContratacion,
        Salario = p_salario
    WHERE EmpleadoID = p_empleadoID;
END actualizar_empleado;
/

-- Eliminar Empleado
CREATE OR REPLACE PROCEDURE eliminar_empleado (
    p_empleadoID IN NUMBER
)
IS
BEGIN
    DELETE FROM Empleados WHERE EmpleadoID = p_empleadoID;
END eliminar_empleado;
/

--Categorias
CREATE TABLE Categorias (
    CategoriaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion VARCHAR2(255)
);

-- Crear Categoria
CREATE OR REPLACE PROCEDURE crear_categoria (
    p_nombre IN VARCHAR2,
    p_descripcion IN VARCHAR2
)
IS
BEGIN
    INSERT INTO Categorias (Nombre, Descripcion)
    VALUES (p_nombre, p_descripcion);
END crear_categoria;
/

-- Leer Categoria
CREATE OR REPLACE PROCEDURE leer_categoria (
    p_categoriaID IN NUMBER,
    cur OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur FOR SELECT * FROM Categorias WHERE CategoriaID = p_categoriaID;
END leer_categoria;
/

-- Actualizar Categoria
CREATE OR REPLACE PROCEDURE actualizar_categoria (
    p_categoriaID IN NUMBER,
    p_nombre IN VARCHAR2,
    p_descripcion IN VARCHAR2
)
IS
BEGIN
    UPDATE Categorias
    SET Nombre = p_nombre,
        Descripcion = p_descripcion
    WHERE CategoriaID = p_categoriaID;
END actualizar_categoria;
/

-- Eliminar Categoria
CREATE OR REPLACE PROCEDURE eliminar_categoria (
    p_categoriaID IN NUMBER
)
IS
BEGIN
    DELETE FROM Categorias WHERE CategoriaID = p_categoriaID;
END eliminar_categoria;
/

--Proveedores
CREATE TABLE Proveedores (
    ProveedorID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Telefono VARCHAR2(15) NOT NULL,
    Direccion VARCHAR2(255),
    Email VARCHAR2(100) NOT NULL
);

-- Crear Proveedor
CREATE OR REPLACE PROCEDURE crear_proveedor (
    p_nombre IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_email IN VARCHAR2
)
IS
BEGIN
    INSERT INTO Proveedores (Nombre, Telefono, Direccion, Email)
    VALUES (p_nombre, p_telefono, p_direccion, p_email);
END crear_proveedor;
/

-- Leer Proveedor
CREATE OR REPLACE PROCEDURE leer_proveedor (
    p_proveedorID IN NUMBER,
    cur OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur FOR SELECT * FROM Proveedores WHERE ProveedorID = p_proveedorID;
END leer_proveedor;
/

-- Actualizar Proveedor
CREATE OR REPLACE PROCEDURE actualizar_proveedor (
    p_proveedorID IN NUMBER,
    p_nombre IN VARCHAR2,
    p_telefono IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_email IN VARCHAR2
)
IS
BEGIN
    UPDATE Proveedores
    SET Nombre = p_nombre,
        Telefono = p_telefono,
        Direccion = p_direccion,
        Email = p_email
    WHERE ProveedorID = p_proveedorID;
END actualizar_proveedor;
/

-- Eliminar Proveedor
CREATE OR REPLACE PROCEDURE eliminar_proveedor (
    p_proveedorID IN NUMBER
)
IS
BEGIN
    DELETE FROM Proveedores WHERE ProveedorID = p_proveedorID;
END eliminar_proveedor;
/

--Productos
CREATE TABLE Productos (
    ProductoID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    CategoriaID NUMBER NOT NULL,
    Precio NUMBER NOT NULL,
    Slock NUMBER NOT NULL,
    ProveedorID NUMBER NOT NULL,
    FOREIGN KEY (CategoriaID) REFERENCES Categorias(CategoriaID),
    FOREIGN KEY (ProveedorID) REFERENCES Proveedores(ProveedorID)
);

-- Crear Producto
CREATE OR REPLACE PROCEDURE crear_producto (
    p_nombre IN VARCHAR2,
    p_categoriaID IN NUMBER,
    p_precio IN NUMBER,
    p_slock IN NUMBER,
    p_proveedorID IN NUMBER
)
IS
BEGIN
    INSERT INTO Productos (Nombre, CategoriaID, Precio, Slock, ProveedorID)
    VALUES (p_nombre, p_categoriaID, p_precio, p_slock, p_proveedorID);
END crear_producto;
/

-- Leer Producto
CREATE OR REPLACE PROCEDURE leer_producto (
    p_productoID IN NUMBER,
    cur OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur FOR SELECT * FROM Productos WHERE ProductoID = p_productoID;
END leer_producto;
/

-- Actualizar Producto
CREATE OR REPLACE PROCEDURE actualizar_producto (
    p_productoID IN NUMBER,
    p_nombre IN VARCHAR2,
    p_categoriaID IN NUMBER,
    p_precio IN NUMBER,
    p_slock IN NUMBER,
    p_proveedorID IN NUMBER
)
IS
BEGIN
    UPDATE Productos
    SET Nombre = p_nombre,
        CategoriaID = p_categoriaID,
        Precio = p_precio,
        Slock = p_slock,
        ProveedorID = p_proveedorID
    WHERE ProductoID = p_productoID;
END actualizar_producto;
/

-- Eliminar Producto
CREATE OR REPLACE PROCEDURE eliminar_producto (
    p_productoID IN NUMBER
)
IS
BEGIN
    DELETE FROM Productos WHERE ProductoID = p_productoID;
END eliminar_producto;
/

--Inventario
CREATE TABLE Inventario (
    InventarioID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmpleadoID NUMBER NOT NULL,
    ProductoID NUMBER NOT NULL,
    Cantidad NUMBER NOT NULL,
    FechaActualizada DATE NOT NULL,
    FOREIGN KEY (EmpleadoID) REFERENCES Empleados(EmpleadoID),
    FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

-- Crear Inventario
CREATE OR REPLACE PROCEDURE crear_inventario (
    p_empleadoID IN NUMBER,
    p_productoID IN NUMBER,
    p_cantidad IN NUMBER,
    p_fechaActualizada IN DATE
)
IS
BEGIN
    INSERT INTO Inventario (EmpleadoID, ProductoID, Cantidad, FechaActualizada)
    VALUES (p_empleadoID, p_productoID, p_cantidad, p_fechaActualizada);
END crear_inventario;
/

-- Leer Inventario
CREATE OR REPLACE PROCEDURE leer_inventario (
    p_inventarioID IN NUMBER,
    cur OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur FOR SELECT * FROM Inventario WHERE InventarioID = p_inventarioID;
END leer_inventario;
/

-- Actualizar Inventario
CREATE OR REPLACE PROCEDURE actualizar_inventario (
    p_inventarioID IN NUMBER,
    p_empleadoID IN NUMBER,
    p_productoID IN NUMBER,
    p_cantidad IN NUMBER,
    p_fechaActualizada IN DATE
)
IS
BEGIN
    UPDATE Inventario
    SET EmpleadoID = p_empleadoID,
        ProductoID = p_productoID,
        Cantidad = p_cantidad,
        FechaActualizada = p_fechaActualizada
    WHERE InventarioID = p_inventarioID;
END actualizar_inventario;
/

-- Eliminar Inventario
CREATE OR REPLACE PROCEDURE eliminar_inventario (
    p_inventarioID IN NUMBER
)
IS
BEGIN
    DELETE FROM Inventario WHERE InventarioID = p_inventarioID;
END eliminar_inventario;
/
